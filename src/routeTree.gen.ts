/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as authenticatedRouteRouteImport } from './routes/(authenticated)/route'
import { Route as authPagesRouteRouteImport } from './routes/(auth-pages)/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DemoIndexRouteImport } from './routes/demo/index'
import { Route as authPagesLoginRouteImport } from './routes/(auth-pages)/login'
import { Route as authenticatedDashboardIndexRouteImport } from './routes/(authenticated)/dashboard/index'
import { Route as authenticatedDashboardWeddingEventIdIndexRouteImport } from './routes/(authenticated)/dashboard/$weddingEventId/index'
import { Route as authenticatedDashboardTimersTimerIdIndexRouteImport } from './routes/(authenticated)/dashboard/timers/$timerId/index'
import { ServerRoute as ApiAuthServerRouteImport } from './routes/api/auth'
import { ServerRoute as ApiTrpcSplatServerRouteImport } from './routes/api/trpc/$'
import { ServerRoute as ApiCronCheckTimersRouteServerRouteImport } from './routes/api/cron/check-timers/route'

const rootServerRouteImport = createServerRootRoute()

const authenticatedRouteRoute = authenticatedRouteRouteImport.update({
  id: '/(authenticated)',
  getParentRoute: () => rootRouteImport,
} as any)
const authPagesRouteRoute = authPagesRouteRouteImport.update({
  id: '/(auth-pages)',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoIndexRoute = DemoIndexRouteImport.update({
  id: '/demo/',
  path: '/demo/',
  getParentRoute: () => rootRouteImport,
} as any)
const authPagesLoginRoute = authPagesLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authPagesRouteRoute,
} as any)
const authenticatedDashboardIndexRoute =
  authenticatedDashboardIndexRouteImport.update({
    id: '/dashboard/',
    path: '/dashboard/',
    getParentRoute: () => authenticatedRouteRoute,
  } as any)
const authenticatedDashboardWeddingEventIdIndexRoute =
  authenticatedDashboardWeddingEventIdIndexRouteImport.update({
    id: '/dashboard/$weddingEventId/',
    path: '/dashboard/$weddingEventId/',
    getParentRoute: () => authenticatedRouteRoute,
  } as any)
const authenticatedDashboardTimersTimerIdIndexRoute =
  authenticatedDashboardTimersTimerIdIndexRouteImport.update({
    id: '/dashboard/timers/$timerId/',
    path: '/dashboard/timers/$timerId/',
    getParentRoute: () => authenticatedRouteRoute,
  } as any)
const ApiAuthServerRoute = ApiAuthServerRouteImport.update({
  id: '/api/auth',
  path: '/api/auth',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiTrpcSplatServerRoute = ApiTrpcSplatServerRouteImport.update({
  id: '/api/trpc/$',
  path: '/api/trpc/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiCronCheckTimersRouteServerRoute =
  ApiCronCheckTimersRouteServerRouteImport.update({
    id: '/api/cron/check-timers',
    path: '/api/cron/check-timers',
    getParentRoute: () => rootServerRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof authenticatedRouteRouteWithChildren
  '/login': typeof authPagesLoginRoute
  '/demo': typeof DemoIndexRoute
  '/dashboard': typeof authenticatedDashboardIndexRoute
  '/dashboard/$weddingEventId': typeof authenticatedDashboardWeddingEventIdIndexRoute
  '/dashboard/timers/$timerId': typeof authenticatedDashboardTimersTimerIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof authenticatedRouteRouteWithChildren
  '/login': typeof authPagesLoginRoute
  '/demo': typeof DemoIndexRoute
  '/dashboard': typeof authenticatedDashboardIndexRoute
  '/dashboard/$weddingEventId': typeof authenticatedDashboardWeddingEventIdIndexRoute
  '/dashboard/timers/$timerId': typeof authenticatedDashboardTimersTimerIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(auth-pages)': typeof authPagesRouteRouteWithChildren
  '/(authenticated)': typeof authenticatedRouteRouteWithChildren
  '/(auth-pages)/login': typeof authPagesLoginRoute
  '/demo/': typeof DemoIndexRoute
  '/(authenticated)/dashboard/': typeof authenticatedDashboardIndexRoute
  '/(authenticated)/dashboard/$weddingEventId/': typeof authenticatedDashboardWeddingEventIdIndexRoute
  '/(authenticated)/dashboard/timers/$timerId/': typeof authenticatedDashboardTimersTimerIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/demo'
    | '/dashboard'
    | '/dashboard/$weddingEventId'
    | '/dashboard/timers/$timerId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/demo'
    | '/dashboard'
    | '/dashboard/$weddingEventId'
    | '/dashboard/timers/$timerId'
  id:
    | '__root__'
    | '/'
    | '/(auth-pages)'
    | '/(authenticated)'
    | '/(auth-pages)/login'
    | '/demo/'
    | '/(authenticated)/dashboard/'
    | '/(authenticated)/dashboard/$weddingEventId/'
    | '/(authenticated)/dashboard/timers/$timerId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  authPagesRouteRoute: typeof authPagesRouteRouteWithChildren
  authenticatedRouteRoute: typeof authenticatedRouteRouteWithChildren
  DemoIndexRoute: typeof DemoIndexRoute
}
export interface FileServerRoutesByFullPath {
  '/api/auth': typeof ApiAuthServerRoute
  '/api/cron/check-timers': typeof ApiCronCheckTimersRouteServerRoute
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth': typeof ApiAuthServerRoute
  '/api/cron/check-timers': typeof ApiCronCheckTimersRouteServerRoute
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth': typeof ApiAuthServerRoute
  '/api/cron/check-timers': typeof ApiCronCheckTimersRouteServerRoute
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth' | '/api/cron/check-timers' | '/api/trpc/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth' | '/api/cron/check-timers' | '/api/trpc/$'
  id: '__root__' | '/api/auth' | '/api/cron/check-timers' | '/api/trpc/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthServerRoute: typeof ApiAuthServerRoute
  ApiCronCheckTimersRouteServerRoute: typeof ApiCronCheckTimersRouteServerRoute
  ApiTrpcSplatServerRoute: typeof ApiTrpcSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(authenticated)': {
      id: '/(authenticated)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authenticatedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth-pages)': {
      id: '/(auth-pages)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authPagesRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/': {
      id: '/demo/'
      path: '/demo'
      fullPath: '/demo'
      preLoaderRoute: typeof DemoIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth-pages)/login': {
      id: '/(auth-pages)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authPagesLoginRouteImport
      parentRoute: typeof authPagesRouteRoute
    }
    '/(authenticated)/dashboard/': {
      id: '/(authenticated)/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof authenticatedDashboardIndexRouteImport
      parentRoute: typeof authenticatedRouteRoute
    }
    '/(authenticated)/dashboard/$weddingEventId/': {
      id: '/(authenticated)/dashboard/$weddingEventId/'
      path: '/dashboard/$weddingEventId'
      fullPath: '/dashboard/$weddingEventId'
      preLoaderRoute: typeof authenticatedDashboardWeddingEventIdIndexRouteImport
      parentRoute: typeof authenticatedRouteRoute
    }
    '/(authenticated)/dashboard/timers/$timerId/': {
      id: '/(authenticated)/dashboard/timers/$timerId/'
      path: '/dashboard/timers/$timerId'
      fullPath: '/dashboard/timers/$timerId'
      preLoaderRoute: typeof authenticatedDashboardTimersTimerIdIndexRouteImport
      parentRoute: typeof authenticatedRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/auth': {
      id: '/api/auth'
      path: '/api/auth'
      fullPath: '/api/auth'
      preLoaderRoute: typeof ApiAuthServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/trpc/$': {
      id: '/api/trpc/$'
      path: '/api/trpc/$'
      fullPath: '/api/trpc/$'
      preLoaderRoute: typeof ApiTrpcSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/cron/check-timers': {
      id: '/api/cron/check-timers'
      path: '/api/cron/check-timers'
      fullPath: '/api/cron/check-timers'
      preLoaderRoute: typeof ApiCronCheckTimersRouteServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface authPagesRouteRouteChildren {
  authPagesLoginRoute: typeof authPagesLoginRoute
}

const authPagesRouteRouteChildren: authPagesRouteRouteChildren = {
  authPagesLoginRoute: authPagesLoginRoute,
}

const authPagesRouteRouteWithChildren = authPagesRouteRoute._addFileChildren(
  authPagesRouteRouteChildren,
)

interface authenticatedRouteRouteChildren {
  authenticatedDashboardIndexRoute: typeof authenticatedDashboardIndexRoute
  authenticatedDashboardWeddingEventIdIndexRoute: typeof authenticatedDashboardWeddingEventIdIndexRoute
  authenticatedDashboardTimersTimerIdIndexRoute: typeof authenticatedDashboardTimersTimerIdIndexRoute
}

const authenticatedRouteRouteChildren: authenticatedRouteRouteChildren = {
  authenticatedDashboardIndexRoute: authenticatedDashboardIndexRoute,
  authenticatedDashboardWeddingEventIdIndexRoute:
    authenticatedDashboardWeddingEventIdIndexRoute,
  authenticatedDashboardTimersTimerIdIndexRoute:
    authenticatedDashboardTimersTimerIdIndexRoute,
}

const authenticatedRouteRouteWithChildren =
  authenticatedRouteRoute._addFileChildren(authenticatedRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authPagesRouteRoute: authPagesRouteRouteWithChildren,
  authenticatedRouteRoute: authenticatedRouteRouteWithChildren,
  DemoIndexRoute: DemoIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthServerRoute: ApiAuthServerRoute,
  ApiCronCheckTimersRouteServerRoute: ApiCronCheckTimersRouteServerRoute,
  ApiTrpcSplatServerRoute: ApiTrpcSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
